import csv
import requests

def fetch_and_paginate_news(start_date):
    all_news_data = []
    next_page_token = None

    while True:
        headers = {
            "accept": "application/json",
            "APCA-API-KEY-ID": "PKCWWRQXRDUHA39IOI8N",
            "APCA-API-SECRET-KEY": "5kSov913hC4g1U0YZxBwUrNf98vO4lKMlcrlqavv"
        }

        url = "https://data.alpaca.markets/v1beta1/news"
        params = {
            "start_date": start_date,
            "limit": 50,
            "include_content": True,
            "exclude_contentless": False,
            "sort" : "asc",
            "symbols
                    TRMB%2CWBA%2CPNR%2CKEY%2CNDSN%2CCPB%2CDOC%2CSWK%2CHST%2CINCY%2CLW%2CLNT%2CTECH%2CPODD%2CNI%2CMGM%2CKIM%2CAOS%2CVTRS%2CJKHY%2CEVRG%2CBEN%2CDVA%2CIPG%2CUHS%2CEMN%2CSJM%2CLKQ%2CTAP%2CJNPR%2CCRL%2CCPT%2CREG%2CKMX%2CAPA%2CRL%2CBBWI%2CALLE%2CWYNN%2CBXP%2CEPAM%2CSOLV%2CCHRW%2CHII%2CFFIV%2CMOS%2CCTLT%2CPAYC%2CTFX%2CTPR%2CQRVO%2CHSIC%2CAAL%2CGNRC%2CDAY%2CAIZ%2CPNW%2CHAS%2CPARA%2CMKTX%2CFRT%2CBIO%2CBWA%2CMTCH%2CFMC%2CGL%2CMHK%2CCZR%2CETSY%2CIVZ"
        }
        if next_page_token:
            url += "&page_token=" + next_page_token

        response = requests.get(url, params=params, headers=headers)
        print(url)
        data = response.json()

        if 'news' not in data:
            print("error1")
            break

        all_news_data.extend(data['news'])
        next_page_token = data.get('next_page_token')

        if not next_page_token:
            print("error2")
            break

    return all_news_data

# Read start dates from CSV
start_dates = []
with open('random_days.csv', newline='') as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
        start_dates.extend(row)

# Fetch and paginate news for each start date
for start_date in start_dates:
    print("Fetching news for start date:", start_date)
    news_data = fetch_and_paginate_news(start_date)
    # Print a summary of the news data
    print("Number of news articles:", len(news_data))
    if len(news_data) > 0:
        print("First headline:", news_data[0]['headline'])
